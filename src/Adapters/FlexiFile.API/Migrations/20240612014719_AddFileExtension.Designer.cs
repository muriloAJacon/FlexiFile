// <auto-generated />
using System;
using System.Text.Json;
using FlexiFile.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FlexiFile.API.Migrations
{
    [DbContext(typeof(PostgresContext))]
    [Migration("20240612014719_AddFileExtension")]
    partial class AddFileExtension
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FlexiFile.Core.Entities.Postgres.File", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("FinishedUpload")
                        .HasColumnType("boolean")
                        .HasColumnName("finished_upload");

                    b.Property<DateTime?>("FinishedUploadAt")
                        .HasPrecision(3)
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("finished_upload_at");

                    b.Property<string>("OriginalName")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("original_name");

                    b.Property<Guid>("OwnedByUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("owned_by_user_id");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<DateTime>("SubmittedAt")
                        .HasPrecision(3)
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("submitted_at");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    b.HasKey("Id")
                        .HasName("pk_File");

                    b.HasIndex(new[] { "OwnedByUserId" }, "IX_File_owned_by_user_id");

                    b.HasIndex(new[] { "TypeId" }, "IX_File_type_id");

                    b.ToTable("File", "FlexiFile");
                });

            modelBuilder.Entity("FlexiFile.Core.Entities.Postgres.FileConversion", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreationDate")
                        .HasPrecision(3)
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("creation_date");

                    b.Property<JsonElement?>("ExtraInfo")
                        .HasColumnType("json")
                        .HasColumnName("extra_info");

                    b.Property<int>("FileTypeConversionId")
                        .HasColumnType("integer")
                        .HasColumnName("file_type_conversion_id");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasPrecision(3)
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("last_update_date");

                    b.Property<double>("PercentageComplete")
                        .HasColumnType("double precision")
                        .HasColumnName("percentage_complete");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status")
                        .HasComment("(\"InQueue\",\"InProgress\",\"Completed\",\"Failed\")");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("FileConversion_pk");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "FileTypeConversionId" }, "IX_FileConversion_file_type_conversion_id");

                    b.ToTable("FileConversion", "FlexiFile");
                });

            modelBuilder.Entity("FlexiFile.Core.Entities.Postgres.FileConversionOrigin", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ExtraInfo")
                        .HasColumnType("json")
                        .HasColumnName("extra_info");

                    b.Property<Guid>("FileConversionId")
                        .HasColumnType("uuid")
                        .HasColumnName("file_conversion_id");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid")
                        .HasColumnName("file_id");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.HasKey("Id")
                        .HasName("pk_FileConversionOrigin");

                    b.HasIndex("FileConversionId");

                    b.HasIndex("FileId");

                    b.ToTable("FileConversionOrigin", "FlexiFile");
                });

            modelBuilder.Entity("FlexiFile.Core.Entities.Postgres.FileConversionResult", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreationDate")
                        .HasPrecision(3)
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("creation_date");

                    b.Property<Guid>("FileConversionId")
                        .HasColumnType("uuid")
                        .HasColumnName("file_conversion_id");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    b.HasKey("Id")
                        .HasName("FileConversionResult_pk");

                    b.HasIndex("TypeId");

                    b.HasIndex(new[] { "FileConversionId" }, "IX_FileConversionResult_file_conversion_id");

                    b.ToTable("FileConversionResult", "FlexiFile");
                });

            modelBuilder.Entity("FlexiFile.Core.Entities.Postgres.FileType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("extension");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("mime_type");

                    b.HasKey("Id")
                        .HasName("FileType_pk");

                    b.ToTable("FileType", "FlexiFile");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "PNG",
                            Extension = "png",
                            MimeType = "image/png"
                        },
                        new
                        {
                            Id = 2,
                            Description = "JPEG",
                            Extension = "jpeg",
                            MimeType = "image/jpeg"
                        },
                        new
                        {
                            Id = 3,
                            Description = "ICO",
                            Extension = "ico",
                            MimeType = "image/vnd.microsoft.icon"
                        },
                        new
                        {
                            Id = 4,
                            Description = "SVG",
                            Extension = "svg",
                            MimeType = "image/svg+xml"
                        },
                        new
                        {
                            Id = 5,
                            Description = "GIF",
                            Extension = "gif",
                            MimeType = "image/gif"
                        },
                        new
                        {
                            Id = 6,
                            Description = "TIFF",
                            Extension = "tiff",
                            MimeType = "image/tiff"
                        },
                        new
                        {
                            Id = 7,
                            Description = "MP4",
                            Extension = "mp4",
                            MimeType = "video/mp4"
                        },
                        new
                        {
                            Id = 8,
                            Description = "MPEG",
                            Extension = "mpeg",
                            MimeType = "video/mpeg"
                        },
                        new
                        {
                            Id = 9,
                            Description = "WEBM",
                            Extension = "webm",
                            MimeType = "video/webm"
                        },
                        new
                        {
                            Id = 10,
                            Description = "MKV",
                            Extension = "mkv",
                            MimeType = "video/x-matroska"
                        },
                        new
                        {
                            Id = 11,
                            Description = "MP3",
                            Extension = "mp3",
                            MimeType = "audio/mpeg"
                        },
                        new
                        {
                            Id = 12,
                            Description = "M4A",
                            Extension = "m4a",
                            MimeType = "audio/mp4"
                        },
                        new
                        {
                            Id = 13,
                            Description = "PDF",
                            Extension = "pdf",
                            MimeType = "application/pdf"
                        });
                });

            modelBuilder.Entity("FlexiFile.Core.Entities.Postgres.FileTypeConversion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("FromTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("from_type_id");

                    b.Property<string>("HandlerClassName")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("handler_class_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<int?>("MaxNumberFiles")
                        .HasColumnType("integer")
                        .HasColumnName("max_number_files");

                    b.Property<int?>("MinNumberFiles")
                        .HasColumnType("integer")
                        .HasColumnName("min_number_files");

                    b.Property<string>("ModelClassName")
                        .HasColumnType("character varying")
                        .HasColumnName("model_class_name");

                    b.Property<int?>("ToTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("to_type_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type")
                        .HasComment("(\"Conversion\",\"Processing\")");

                    b.HasKey("Id")
                        .HasName("pk_FileTypeConversion");

                    b.HasIndex(new[] { "FromTypeId" }, "IX_FileTypeConversion_from_type_id");

                    b.HasIndex(new[] { "ToTypeId" }, "IX_FileTypeConversion_to_type_id");

                    b.ToTable("FileTypeConversion", "FlexiFile");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Converts PNG to JPEG",
                            FromTypeId = 1,
                            HandlerClassName = "IConvertImageService",
                            IsActive = true,
                            MaxNumberFiles = 1,
                            ToTypeId = 2,
                            Type = "1"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Converts PNG to ICO",
                            FromTypeId = 1,
                            HandlerClassName = "IConvertImageService",
                            IsActive = true,
                            MaxNumberFiles = 1,
                            ToTypeId = 3,
                            Type = "1"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Converts PNG to SVG",
                            FromTypeId = 1,
                            HandlerClassName = "IConvertImageService",
                            IsActive = true,
                            MaxNumberFiles = 1,
                            ToTypeId = 4,
                            Type = "1"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Converts MKV to MP4",
                            FromTypeId = 10,
                            HandlerClassName = "IConvertVideoService",
                            IsActive = true,
                            MaxNumberFiles = 1,
                            ToTypeId = 7,
                            Type = "1"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Converts MP3 to M4A",
                            FromTypeId = 11,
                            HandlerClassName = "IConvertAudioService",
                            IsActive = true,
                            MaxNumberFiles = 1,
                            ToTypeId = 12,
                            Type = "1"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Converts MP4 to MP3",
                            FromTypeId = 7,
                            HandlerClassName = "IConvertVideoService",
                            IsActive = true,
                            MaxNumberFiles = 1,
                            ToTypeId = 11,
                            Type = "1"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Converts PNG to GIF",
                            FromTypeId = 1,
                            HandlerClassName = "IConvertImageService",
                            IsActive = true,
                            MaxNumberFiles = 1,
                            ToTypeId = 5,
                            Type = "1"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Converts PNG to TIFF",
                            FromTypeId = 1,
                            HandlerClassName = "IConvertImageService",
                            IsActive = true,
                            MaxNumberFiles = 1,
                            ToTypeId = 6,
                            Type = "1"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Converts JPEG to PNG",
                            FromTypeId = 2,
                            HandlerClassName = "IConvertImageService",
                            IsActive = true,
                            MaxNumberFiles = 1,
                            ToTypeId = 1,
                            Type = "1"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Converts JPEG to ICO",
                            FromTypeId = 2,
                            HandlerClassName = "IConvertImageService",
                            IsActive = true,
                            MaxNumberFiles = 1,
                            ToTypeId = 3,
                            Type = "1"
                        },
                        new
                        {
                            Id = 11,
                            Description = "Converts JPEG to SVG",
                            FromTypeId = 2,
                            HandlerClassName = "IConvertImageService",
                            IsActive = true,
                            MaxNumberFiles = 1,
                            ToTypeId = 4,
                            Type = "1"
                        },
                        new
                        {
                            Id = 12,
                            Description = "Converts JPEG to GIF",
                            FromTypeId = 2,
                            HandlerClassName = "IConvertImageService",
                            IsActive = true,
                            MaxNumberFiles = 1,
                            ToTypeId = 5,
                            Type = "1"
                        },
                        new
                        {
                            Id = 13,
                            Description = "Converts JPEG to TIFF",
                            FromTypeId = 2,
                            HandlerClassName = "IConvertImageService",
                            IsActive = true,
                            MaxNumberFiles = 1,
                            ToTypeId = 6,
                            Type = "1"
                        },
                        new
                        {
                            Id = 14,
                            Description = "Converts ICO to PNG",
                            FromTypeId = 3,
                            HandlerClassName = "IConvertImageService",
                            IsActive = true,
                            MaxNumberFiles = 1,
                            ToTypeId = 1,
                            Type = "1"
                        },
                        new
                        {
                            Id = 15,
                            Description = "Converts ICO to JPEG",
                            FromTypeId = 3,
                            HandlerClassName = "IConvertImageService",
                            IsActive = true,
                            MaxNumberFiles = 1,
                            ToTypeId = 2,
                            Type = "1"
                        },
                        new
                        {
                            Id = 16,
                            Description = "Converts ICO to SVG",
                            FromTypeId = 3,
                            HandlerClassName = "IConvertImageService",
                            IsActive = true,
                            MaxNumberFiles = 1,
                            ToTypeId = 4,
                            Type = "1"
                        },
                        new
                        {
                            Id = 17,
                            Description = "Converts ICO to GIF",
                            FromTypeId = 3,
                            HandlerClassName = "IConvertImageService",
                            IsActive = true,
                            MaxNumberFiles = 1,
                            ToTypeId = 5,
                            Type = "1"
                        },
                        new
                        {
                            Id = 18,
                            Description = "Converts ICO to TIFF",
                            FromTypeId = 3,
                            HandlerClassName = "IConvertImageService",
                            IsActive = true,
                            MaxNumberFiles = 1,
                            ToTypeId = 6,
                            Type = "1"
                        },
                        new
                        {
                            Id = 19,
                            Description = "Converts SVG to PNG",
                            FromTypeId = 4,
                            HandlerClassName = "IConvertImageService",
                            IsActive = true,
                            MaxNumberFiles = 1,
                            ToTypeId = 1,
                            Type = "1"
                        },
                        new
                        {
                            Id = 20,
                            Description = "Converts SVG to JPEG",
                            FromTypeId = 4,
                            HandlerClassName = "IConvertImageService",
                            IsActive = true,
                            MaxNumberFiles = 1,
                            ToTypeId = 2,
                            Type = "1"
                        },
                        new
                        {
                            Id = 21,
                            Description = "Converts SVG to ICO",
                            FromTypeId = 4,
                            HandlerClassName = "IConvertImageService",
                            IsActive = true,
                            MaxNumberFiles = 1,
                            ToTypeId = 3,
                            Type = "1"
                        },
                        new
                        {
                            Id = 22,
                            Description = "Converts SVG to GIF",
                            FromTypeId = 4,
                            HandlerClassName = "IConvertImageService",
                            IsActive = true,
                            MaxNumberFiles = 1,
                            ToTypeId = 5,
                            Type = "1"
                        },
                        new
                        {
                            Id = 23,
                            Description = "Converts SVG to TIFF",
                            FromTypeId = 4,
                            HandlerClassName = "IConvertImageService",
                            IsActive = true,
                            MaxNumberFiles = 1,
                            ToTypeId = 6,
                            Type = "1"
                        },
                        new
                        {
                            Id = 24,
                            Description = "Converts GIF to PNG",
                            FromTypeId = 5,
                            HandlerClassName = "IConvertImageService",
                            IsActive = true,
                            MaxNumberFiles = 1,
                            ToTypeId = 1,
                            Type = "1"
                        },
                        new
                        {
                            Id = 25,
                            Description = "Converts GIF to JPEG",
                            FromTypeId = 5,
                            HandlerClassName = "IConvertImageService",
                            IsActive = true,
                            MaxNumberFiles = 1,
                            ToTypeId = 2,
                            Type = "1"
                        },
                        new
                        {
                            Id = 26,
                            Description = "Converts GIF to ICO",
                            FromTypeId = 5,
                            HandlerClassName = "IConvertImageService",
                            IsActive = true,
                            MaxNumberFiles = 1,
                            ToTypeId = 3,
                            Type = "1"
                        },
                        new
                        {
                            Id = 27,
                            Description = "Converts GIF to SVG",
                            FromTypeId = 5,
                            HandlerClassName = "IConvertImageService",
                            IsActive = true,
                            MaxNumberFiles = 1,
                            ToTypeId = 4,
                            Type = "1"
                        },
                        new
                        {
                            Id = 28,
                            Description = "Converts GIF to TIFF",
                            FromTypeId = 5,
                            HandlerClassName = "IConvertImageService",
                            IsActive = true,
                            MaxNumberFiles = 1,
                            ToTypeId = 6,
                            Type = "1"
                        },
                        new
                        {
                            Id = 29,
                            Description = "Converts TIFF to PNG",
                            FromTypeId = 6,
                            HandlerClassName = "IConvertImageService",
                            IsActive = true,
                            MaxNumberFiles = 1,
                            ToTypeId = 1,
                            Type = "1"
                        },
                        new
                        {
                            Id = 30,
                            Description = "Converts TIFF to JPEG",
                            FromTypeId = 6,
                            HandlerClassName = "IConvertImageService",
                            IsActive = true,
                            MaxNumberFiles = 1,
                            ToTypeId = 2,
                            Type = "1"
                        },
                        new
                        {
                            Id = 31,
                            Description = "Converts TIFF to ICO",
                            FromTypeId = 6,
                            HandlerClassName = "IConvertImageService",
                            IsActive = true,
                            MaxNumberFiles = 1,
                            ToTypeId = 3,
                            Type = "1"
                        },
                        new
                        {
                            Id = 32,
                            Description = "Converts TIFF to SVG",
                            FromTypeId = 6,
                            HandlerClassName = "IConvertImageService",
                            IsActive = true,
                            MaxNumberFiles = 1,
                            ToTypeId = 4,
                            Type = "1"
                        },
                        new
                        {
                            Id = 33,
                            Description = "Converts TIFF to GIF",
                            FromTypeId = 6,
                            HandlerClassName = "IConvertImageService",
                            IsActive = true,
                            MaxNumberFiles = 1,
                            ToTypeId = 5,
                            Type = "1"
                        },
                        new
                        {
                            Id = 34,
                            Description = "Converts MP4 to MPEG",
                            FromTypeId = 7,
                            HandlerClassName = "IConvertVideoService",
                            IsActive = true,
                            MaxNumberFiles = 1,
                            ToTypeId = 8,
                            Type = "1"
                        },
                        new
                        {
                            Id = 35,
                            Description = "Converts MP4 to WEBM",
                            FromTypeId = 7,
                            HandlerClassName = "IConvertVideoService",
                            IsActive = true,
                            MaxNumberFiles = 1,
                            ToTypeId = 9,
                            Type = "1"
                        },
                        new
                        {
                            Id = 36,
                            Description = "Converts MP4 to MKV",
                            FromTypeId = 7,
                            HandlerClassName = "IConvertVideoService",
                            IsActive = true,
                            MaxNumberFiles = 1,
                            ToTypeId = 10,
                            Type = "1"
                        },
                        new
                        {
                            Id = 37,
                            Description = "Converts MPEG to MP4",
                            FromTypeId = 8,
                            HandlerClassName = "IConvertVideoService",
                            IsActive = true,
                            MaxNumberFiles = 1,
                            ToTypeId = 7,
                            Type = "1"
                        },
                        new
                        {
                            Id = 38,
                            Description = "Converts MPEG to WEBM",
                            FromTypeId = 8,
                            HandlerClassName = "IConvertVideoService",
                            IsActive = true,
                            MaxNumberFiles = 1,
                            ToTypeId = 9,
                            Type = "1"
                        },
                        new
                        {
                            Id = 39,
                            Description = "Converts MPEG to MKV",
                            FromTypeId = 8,
                            HandlerClassName = "IConvertVideoService",
                            IsActive = true,
                            MaxNumberFiles = 1,
                            ToTypeId = 10,
                            Type = "1"
                        },
                        new
                        {
                            Id = 40,
                            Description = "Converts WEBM to MP4",
                            FromTypeId = 9,
                            HandlerClassName = "IConvertVideoService",
                            IsActive = true,
                            MaxNumberFiles = 1,
                            ToTypeId = 7,
                            Type = "1"
                        },
                        new
                        {
                            Id = 41,
                            Description = "Converts WEBM to MPEG",
                            FromTypeId = 9,
                            HandlerClassName = "IConvertVideoService",
                            IsActive = true,
                            MaxNumberFiles = 1,
                            ToTypeId = 8,
                            Type = "1"
                        },
                        new
                        {
                            Id = 42,
                            Description = "Converts WEBM to MKV",
                            FromTypeId = 9,
                            HandlerClassName = "IConvertVideoService",
                            IsActive = true,
                            MaxNumberFiles = 1,
                            ToTypeId = 10,
                            Type = "1"
                        },
                        new
                        {
                            Id = 43,
                            Description = "Converts MKV to MPEG",
                            FromTypeId = 10,
                            HandlerClassName = "IConvertVideoService",
                            IsActive = true,
                            MaxNumberFiles = 1,
                            ToTypeId = 8,
                            Type = "1"
                        },
                        new
                        {
                            Id = 44,
                            Description = "Converts MKV to WEBM",
                            FromTypeId = 10,
                            HandlerClassName = "IConvertVideoService",
                            IsActive = true,
                            MaxNumberFiles = 1,
                            ToTypeId = 9,
                            Type = "1"
                        },
                        new
                        {
                            Id = 45,
                            Description = "Converts MPEG to MP3",
                            FromTypeId = 8,
                            HandlerClassName = "IConvertVideoService",
                            IsActive = true,
                            MaxNumberFiles = 1,
                            ToTypeId = 11,
                            Type = "1"
                        },
                        new
                        {
                            Id = 46,
                            Description = "Converts WEBM to MP3",
                            FromTypeId = 9,
                            HandlerClassName = "IConvertVideoService",
                            IsActive = true,
                            MaxNumberFiles = 1,
                            ToTypeId = 11,
                            Type = "1"
                        },
                        new
                        {
                            Id = 47,
                            Description = "Converts MKV to MP3",
                            FromTypeId = 10,
                            HandlerClassName = "IConvertVideoService",
                            IsActive = true,
                            MaxNumberFiles = 1,
                            ToTypeId = 11,
                            Type = "1"
                        },
                        new
                        {
                            Id = 48,
                            Description = "Converts MP4 to M4A",
                            FromTypeId = 7,
                            HandlerClassName = "IConvertVideoService",
                            IsActive = true,
                            MaxNumberFiles = 1,
                            ToTypeId = 12,
                            Type = "1"
                        },
                        new
                        {
                            Id = 49,
                            Description = "Converts MPEG to M4A",
                            FromTypeId = 8,
                            HandlerClassName = "IConvertVideoService",
                            IsActive = true,
                            MaxNumberFiles = 1,
                            ToTypeId = 12,
                            Type = "1"
                        },
                        new
                        {
                            Id = 50,
                            Description = "Converts WEBM to M4A",
                            FromTypeId = 9,
                            HandlerClassName = "IConvertVideoService",
                            IsActive = true,
                            MaxNumberFiles = 1,
                            ToTypeId = 12,
                            Type = "1"
                        },
                        new
                        {
                            Id = 51,
                            Description = "Converts MKV to M4A",
                            FromTypeId = 10,
                            HandlerClassName = "IConvertVideoService",
                            IsActive = true,
                            MaxNumberFiles = 1,
                            ToTypeId = 12,
                            Type = "1"
                        },
                        new
                        {
                            Id = 52,
                            Description = "Converts M4A to MP3",
                            FromTypeId = 12,
                            HandlerClassName = "IConvertAudioService",
                            IsActive = true,
                            MaxNumberFiles = 1,
                            ToTypeId = 11,
                            Type = "1"
                        },
                        new
                        {
                            Id = 53,
                            Description = "Splits one PDF file into multiple files",
                            FromTypeId = 13,
                            HandlerClassName = "ISplitDocumentService",
                            IsActive = true,
                            MaxNumberFiles = 1,
                            Type = "2"
                        },
                        new
                        {
                            Id = 54,
                            Description = "Merges multiple PDF files into one file",
                            FromTypeId = 13,
                            HandlerClassName = "IMergeDocumentService",
                            IsActive = true,
                            MinNumberFiles = 2,
                            Type = "2"
                        },
                        new
                        {
                            Id = 55,
                            Description = "Rearranges the pages of a PDF file",
                            FromTypeId = 13,
                            HandlerClassName = "IRearrangeDocumentService",
                            IsActive = true,
                            MaxNumberFiles = 1,
                            ModelClassName = "RearrangeDocumentParameters",
                            Type = "2"
                        });
                });

            modelBuilder.Entity("FlexiFile.Core.Entities.Postgres.Setting", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying")
                        .HasColumnName("id");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasPrecision(3)
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("last_update_date");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by_user_id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_Setting");

                    b.HasIndex(new[] { "UpdatedByUserId" }, "IX_Setting_updated_by_user_id");

                    b.ToTable("Setting", "FlexiFile");

                    b.HasData(
                        new
                        {
                            Id = "GLOBAL_MAXIMUM_FILE_SIZE",
                            Value = "0"
                        },
                        new
                        {
                            Id = "ALLOW_ANONYMOUS_REGISTER",
                            Value = "False"
                        });
                });

            modelBuilder.Entity("FlexiFile.Core.Entities.Postgres.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AccessLevel")
                        .HasColumnType("integer")
                        .HasColumnName("access_level");

                    b.Property<bool>("Approved")
                        .HasColumnType("boolean")
                        .HasColumnName("approved");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasPrecision(3)
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("approved_at");

                    b.Property<Guid?>("ApprovedByUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("approved_by_user_id");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_user_id");

                    b.Property<DateTime>("CreationDate")
                        .HasPrecision(3)
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("creation_date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("email");

                    b.Property<long?>("HardStorageLimit")
                        .HasColumnType("bigint")
                        .HasColumnName("hard_storage_limit");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasPrecision(3)
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("last_update_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("password");

                    b.Property<long?>("StorageLimit")
                        .HasColumnType("bigint")
                        .HasColumnName("storage_limit");

                    b.Property<long>("StorageUsed")
                        .HasColumnType("bigint")
                        .HasColumnName("storage_used");

                    b.HasKey("Id")
                        .HasName("pk_User");

                    b.HasIndex(new[] { "ApprovedByUserId" }, "IX_User_approved_by_user_id");

                    b.HasIndex(new[] { "CreatedByUserId" }, "IX_User_created_by_user_id");

                    b.ToTable("User", "FlexiFile");
                });

            modelBuilder.Entity("FlexiFile.Core.Entities.Postgres.UserLoginAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("SourceIp")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("source_ip");

                    b.Property<string>("SourceUserAgent")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("source_user_agent");

                    b.Property<bool>("Successful")
                        .HasColumnType("boolean")
                        .HasColumnName("successful");

                    b.Property<DateTime>("Timestamp")
                        .HasPrecision(3)
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("timestamp");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_UserLoginAudit");

                    b.HasIndex(new[] { "UserId" }, "IX_UserLoginAudit_user_id");

                    b.ToTable("UserLoginAudit", "FlexiFile");
                });

            modelBuilder.Entity("FlexiFile.Core.Entities.Postgres.UserRefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasPrecision(3)
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("ExpiresAt")
                        .HasPrecision(3)
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("expires_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_UserRefreshToken");

                    b.HasIndex(new[] { "UserId" }, "IX_UserRefreshToken_user_id");

                    b.ToTable("UserRefreshToken", "FlexiFile");
                });

            modelBuilder.Entity("FlexiFile.Core.Entities.Postgres.File", b =>
                {
                    b.HasOne("FlexiFile.Core.Entities.Postgres.User", "OwnedByUser")
                        .WithMany("Files")
                        .HasForeignKey("OwnedByUserId")
                        .IsRequired()
                        .HasConstraintName("fk_File_User");

                    b.HasOne("FlexiFile.Core.Entities.Postgres.FileType", "Type")
                        .WithMany("Files")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("File_FileType_id_fk");

                    b.Navigation("OwnedByUser");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("FlexiFile.Core.Entities.Postgres.FileConversion", b =>
                {
                    b.HasOne("FlexiFile.Core.Entities.Postgres.FileTypeConversion", "FileTypeConversion")
                        .WithMany("FileConversions")
                        .HasForeignKey("FileTypeConversionId")
                        .IsRequired()
                        .HasConstraintName("fk_FileConversion_FileTypeConversion");

                    b.HasOne("FlexiFile.Core.Entities.Postgres.User", "User")
                        .WithMany("FileConversions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("fk_FileConversion_User");

                    b.Navigation("FileTypeConversion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlexiFile.Core.Entities.Postgres.FileConversionOrigin", b =>
                {
                    b.HasOne("FlexiFile.Core.Entities.Postgres.FileConversion", "FileConversion")
                        .WithMany("FileConversionOrigins")
                        .HasForeignKey("FileConversionId")
                        .IsRequired()
                        .HasConstraintName("fk_FileConversionOrigin_FileConversion");

                    b.HasOne("FlexiFile.Core.Entities.Postgres.File", "File")
                        .WithMany("FileConversionOrigins")
                        .HasForeignKey("FileId")
                        .IsRequired()
                        .HasConstraintName("fk_FileConversionOrigin_File");

                    b.Navigation("File");

                    b.Navigation("FileConversion");
                });

            modelBuilder.Entity("FlexiFile.Core.Entities.Postgres.FileConversionResult", b =>
                {
                    b.HasOne("FlexiFile.Core.Entities.Postgres.FileConversion", "FileConversion")
                        .WithMany("FileConversionResults")
                        .HasForeignKey("FileConversionId")
                        .IsRequired()
                        .HasConstraintName("FileConversionResult_FileConversion_id_fk");

                    b.HasOne("FlexiFile.Core.Entities.Postgres.FileType", "Type")
                        .WithMany("FileConversionResults")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileConversion");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("FlexiFile.Core.Entities.Postgres.FileTypeConversion", b =>
                {
                    b.HasOne("FlexiFile.Core.Entities.Postgres.FileType", "FromType")
                        .WithMany("FileTypeConversionFromTypes")
                        .HasForeignKey("FromTypeId")
                        .IsRequired()
                        .HasConstraintName("fk_FileTypeConversion_FileType_from_type");

                    b.HasOne("FlexiFile.Core.Entities.Postgres.FileType", "ToType")
                        .WithMany("FileTypeConversionToTypes")
                        .HasForeignKey("ToTypeId")
                        .HasConstraintName("fk_FileTypeConversion_FileType_to_type");

                    b.Navigation("FromType");

                    b.Navigation("ToType");
                });

            modelBuilder.Entity("FlexiFile.Core.Entities.Postgres.Setting", b =>
                {
                    b.HasOne("FlexiFile.Core.Entities.Postgres.User", "UpdatedByUser")
                        .WithMany("Settings")
                        .HasForeignKey("UpdatedByUserId")
                        .HasConstraintName("fk_Setting_User");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("FlexiFile.Core.Entities.Postgres.User", b =>
                {
                    b.HasOne("FlexiFile.Core.Entities.Postgres.User", "ApprovedByUser")
                        .WithMany("InverseApprovedByUser")
                        .HasForeignKey("ApprovedByUserId")
                        .HasConstraintName("fk_User_User_approvedby");

                    b.HasOne("FlexiFile.Core.Entities.Postgres.User", "CreatedByUser")
                        .WithMany("InverseCreatedByUser")
                        .HasForeignKey("CreatedByUserId")
                        .HasConstraintName("fk_User_User_createdby");

                    b.Navigation("ApprovedByUser");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("FlexiFile.Core.Entities.Postgres.UserLoginAudit", b =>
                {
                    b.HasOne("FlexiFile.Core.Entities.Postgres.User", "User")
                        .WithMany("UserLoginAudits")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("fk_UserLoginAudit_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlexiFile.Core.Entities.Postgres.UserRefreshToken", b =>
                {
                    b.HasOne("FlexiFile.Core.Entities.Postgres.User", "User")
                        .WithMany("UserRefreshTokens")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("fk_UserRefreshToken_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlexiFile.Core.Entities.Postgres.File", b =>
                {
                    b.Navigation("FileConversionOrigins");
                });

            modelBuilder.Entity("FlexiFile.Core.Entities.Postgres.FileConversion", b =>
                {
                    b.Navigation("FileConversionOrigins");

                    b.Navigation("FileConversionResults");
                });

            modelBuilder.Entity("FlexiFile.Core.Entities.Postgres.FileType", b =>
                {
                    b.Navigation("FileConversionResults");

                    b.Navigation("FileTypeConversionFromTypes");

                    b.Navigation("FileTypeConversionToTypes");

                    b.Navigation("Files");
                });

            modelBuilder.Entity("FlexiFile.Core.Entities.Postgres.FileTypeConversion", b =>
                {
                    b.Navigation("FileConversions");
                });

            modelBuilder.Entity("FlexiFile.Core.Entities.Postgres.User", b =>
                {
                    b.Navigation("FileConversions");

                    b.Navigation("Files");

                    b.Navigation("InverseApprovedByUser");

                    b.Navigation("InverseCreatedByUser");

                    b.Navigation("Settings");

                    b.Navigation("UserLoginAudits");

                    b.Navigation("UserRefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
