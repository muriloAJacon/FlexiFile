// <auto-generated />
using System;
using FlexiFile.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FlexiFile.API.Migrations
{
    [DbContext(typeof(PostgresContext))]
    [Migration("20230914021651_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FlexiFile.Core.Entities.Postgres.File", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("FinishedUpload")
                        .HasColumnType("boolean")
                        .HasColumnName("finished_upload");

                    b.Property<DateTime?>("FinishedUploadAt")
                        .HasColumnType("timestamp(3) without time zone")
                        .HasColumnName("finished_upload_at");

                    b.Property<string>("OriginalName")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("original_name");

                    b.Property<Guid>("OwnedByUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("owned_by_user_id");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("timestamp(3) without time zone")
                        .HasColumnName("submitted_at");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    b.HasKey("Id")
                        .HasName("pk_File");

                    b.HasIndex("OwnedByUserId");

                    b.HasIndex("TypeId");

                    b.ToTable("File", "FlexiFile");
                });

            modelBuilder.Entity("FlexiFile.Core.Entities.Postgres.FileConversion", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp(3) without time zone")
                        .HasColumnName("creation_date");

                    b.Property<string>("ExtraInfo")
                        .HasColumnType("json")
                        .HasColumnName("extra_info");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid")
                        .HasColumnName("file_id");

                    b.Property<int>("FileTypeConversionId")
                        .HasColumnType("integer")
                        .HasColumnName("file_type_conversion_id");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("timestamp(3) without time zone")
                        .HasColumnName("last_update_date");

                    b.Property<double>("PercentageComplete")
                        .HasColumnType("double precision")
                        .HasColumnName("percentage_complete");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status")
                        .HasComment("(\"InQueue\",\"InProgress\",\"Completed\",\"Failed\")");

                    b.HasKey("Id")
                        .HasName("FileConversion_pk");

                    b.HasIndex("FileId");

                    b.HasIndex("FileTypeConversionId");

                    b.ToTable("FileConversion", "FlexiFile");
                });

            modelBuilder.Entity("FlexiFile.Core.Entities.Postgres.FileConversionResult", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp(3) without time zone")
                        .HasColumnName("creation_date");

                    b.Property<Guid>("FileConversionId")
                        .HasColumnType("uuid")
                        .HasColumnName("file_conversion_id");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.HasKey("Id")
                        .HasName("FileConversionResult_pk");

                    b.HasIndex("FileConversionId");

                    b.ToTable("FileConversionResult", "FlexiFile");
                });

            modelBuilder.Entity("FlexiFile.Core.Entities.Postgres.FileType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<string[]>("MimeTypes")
                        .IsRequired()
                        .HasColumnType("character varying[]")
                        .HasColumnName("mime_types");

                    b.HasKey("Id")
                        .HasName("FileType_pk");

                    b.ToTable("FileType", "FlexiFile");
                });

            modelBuilder.Entity("FlexiFile.Core.Entities.Postgres.FileTypeConversion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("FromTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("from_type_id");

                    b.Property<string>("HandlerClassName")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("handler_class_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<int>("ToTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("to_type_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type")
                        .HasComment("(\"Conversion\",\"Processing\")");

                    b.HasKey("Id")
                        .HasName("pk_FileTypeConversion");

                    b.HasIndex("FromTypeId");

                    b.HasIndex("ToTypeId");

                    b.ToTable("FileTypeConversion", "FlexiFile");
                });

            modelBuilder.Entity("FlexiFile.Core.Entities.Postgres.Setting", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying")
                        .HasColumnName("id");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("timestamp(3) without time zone")
                        .HasColumnName("last_update_date");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by_user_id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_Setting");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("Setting", "FlexiFile");
                });

            modelBuilder.Entity("FlexiFile.Core.Entities.Postgres.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AccessLevel")
                        .HasColumnType("integer")
                        .HasColumnName("access_level");

                    b.Property<bool>("Approved")
                        .HasColumnType("boolean")
                        .HasColumnName("approved");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("timestamp(3) without time zone")
                        .HasColumnName("approved_at");

                    b.Property<Guid?>("ApprovedByUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("approved_by_user_id");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_user_id");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp(3) without time zone")
                        .HasColumnName("creation_date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("email");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("timestamp(3) without time zone")
                        .HasColumnName("last_update_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("password");

                    b.Property<long?>("StorageLimit")
                        .HasColumnType("bigint")
                        .HasColumnName("storage_limit");

                    b.HasKey("Id")
                        .HasName("pk_User");

                    b.HasIndex("ApprovedByUserId");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("User", "FlexiFile");
                });

            modelBuilder.Entity("FlexiFile.Core.Entities.Postgres.UserLoginAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("SourceIp")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("source_ip");

                    b.Property<string>("SourceUserAgent")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("source_user_agent");

                    b.Property<bool>("Successful")
                        .HasColumnType("boolean")
                        .HasColumnName("successful");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp(3) without time zone")
                        .HasColumnName("timestamp");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_UserLoginAudit");

                    b.HasIndex("UserId");

                    b.ToTable("UserLoginAudit", "FlexiFile");
                });

            modelBuilder.Entity("FlexiFile.Core.Entities.Postgres.UserRefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(3) without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp(3) without time zone")
                        .HasColumnName("expires_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_UserRefreshToken");

                    b.HasIndex("UserId");

                    b.ToTable("UserRefreshToken", "FlexiFile");
                });

            modelBuilder.Entity("FlexiFile.Core.Entities.Postgres.File", b =>
                {
                    b.HasOne("FlexiFile.Core.Entities.Postgres.User", "OwnedByUser")
                        .WithMany("Files")
                        .HasForeignKey("OwnedByUserId")
                        .IsRequired()
                        .HasConstraintName("fk_File_User");

                    b.HasOne("FlexiFile.Core.Entities.Postgres.FileType", "Type")
                        .WithMany("Files")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("File_FileType_id_fk");

                    b.Navigation("OwnedByUser");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("FlexiFile.Core.Entities.Postgres.FileConversion", b =>
                {
                    b.HasOne("FlexiFile.Core.Entities.Postgres.File", "File")
                        .WithMany("FileConversions")
                        .HasForeignKey("FileId")
                        .IsRequired()
                        .HasConstraintName("FileConversion_File_id_fk");

                    b.HasOne("FlexiFile.Core.Entities.Postgres.FileTypeConversion", "FileTypeConversion")
                        .WithMany("FileConversions")
                        .HasForeignKey("FileTypeConversionId")
                        .IsRequired()
                        .HasConstraintName("fk_FileConversion_FileTypeConversion");

                    b.Navigation("File");

                    b.Navigation("FileTypeConversion");
                });

            modelBuilder.Entity("FlexiFile.Core.Entities.Postgres.FileConversionResult", b =>
                {
                    b.HasOne("FlexiFile.Core.Entities.Postgres.FileConversion", "FileConversion")
                        .WithMany("FileConversionResults")
                        .HasForeignKey("FileConversionId")
                        .IsRequired()
                        .HasConstraintName("FileConversionResult_FileConversion_id_fk");

                    b.Navigation("FileConversion");
                });

            modelBuilder.Entity("FlexiFile.Core.Entities.Postgres.FileTypeConversion", b =>
                {
                    b.HasOne("FlexiFile.Core.Entities.Postgres.FileType", "FromType")
                        .WithMany("FileTypeConversionFromTypes")
                        .HasForeignKey("FromTypeId")
                        .IsRequired()
                        .HasConstraintName("fk_FileTypeConversion_FileType_from_type");

                    b.HasOne("FlexiFile.Core.Entities.Postgres.FileType", "ToType")
                        .WithMany("FileTypeConversionToTypes")
                        .HasForeignKey("ToTypeId")
                        .IsRequired()
                        .HasConstraintName("fk_FileTypeConversion_FileType_to_type");

                    b.Navigation("FromType");

                    b.Navigation("ToType");
                });

            modelBuilder.Entity("FlexiFile.Core.Entities.Postgres.Setting", b =>
                {
                    b.HasOne("FlexiFile.Core.Entities.Postgres.User", "UpdatedByUser")
                        .WithMany("Settings")
                        .HasForeignKey("UpdatedByUserId")
                        .HasConstraintName("fk_Setting_User");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("FlexiFile.Core.Entities.Postgres.User", b =>
                {
                    b.HasOne("FlexiFile.Core.Entities.Postgres.User", "ApprovedByUser")
                        .WithMany("InverseApprovedByUser")
                        .HasForeignKey("ApprovedByUserId")
                        .HasConstraintName("fk_User_User_approvedby");

                    b.HasOne("FlexiFile.Core.Entities.Postgres.User", "CreatedByUser")
                        .WithMany("InverseCreatedByUser")
                        .HasForeignKey("CreatedByUserId")
                        .HasConstraintName("fk_User_User_createdby");

                    b.Navigation("ApprovedByUser");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("FlexiFile.Core.Entities.Postgres.UserLoginAudit", b =>
                {
                    b.HasOne("FlexiFile.Core.Entities.Postgres.User", "User")
                        .WithMany("UserLoginAudits")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("fk_UserLoginAudit_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlexiFile.Core.Entities.Postgres.UserRefreshToken", b =>
                {
                    b.HasOne("FlexiFile.Core.Entities.Postgres.User", "User")
                        .WithMany("UserRefreshTokens")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("fk_UserRefreshToken_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlexiFile.Core.Entities.Postgres.File", b =>
                {
                    b.Navigation("FileConversions");
                });

            modelBuilder.Entity("FlexiFile.Core.Entities.Postgres.FileConversion", b =>
                {
                    b.Navigation("FileConversionResults");
                });

            modelBuilder.Entity("FlexiFile.Core.Entities.Postgres.FileType", b =>
                {
                    b.Navigation("FileTypeConversionFromTypes");

                    b.Navigation("FileTypeConversionToTypes");

                    b.Navigation("Files");
                });

            modelBuilder.Entity("FlexiFile.Core.Entities.Postgres.FileTypeConversion", b =>
                {
                    b.Navigation("FileConversions");
                });

            modelBuilder.Entity("FlexiFile.Core.Entities.Postgres.User", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("InverseApprovedByUser");

                    b.Navigation("InverseCreatedByUser");

                    b.Navigation("Settings");

                    b.Navigation("UserLoginAudits");

                    b.Navigation("UserRefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
